<?xml version="1.0" encoding="UTF-8"?>
<protocol name="dde_seat">
  <copyright><![CDATA[
    SPDX-FileCopyrightText: 2018 - 2023 UnionTech Software Technology Co., Ltd.

    SPDX-License-Identifier: LGPL-2.1-or-later
  ]]></copyright>

  <description summary="protocol to get global input events">
  </description>

  <interface name="dde_seat" version="1">
    <description summary="get pointer objects">
      A global interface used for getting the global seat object for a
      given input device.
    </description>

    <request name="get_dde_pointer">
      <description summary="get a pointer object">
      get a pointer through a global seat object
      </description>
      <arg name="id" type="new_id" interface="dde_pointer"/>
    </request>

    <request name="get_dde_keyboard">
      <description summary="return keyboard object">
        The ID provided will be initialized to the dde_keyboard interface
        for this seat.

        This request only takes effect if the seat has the keyboard
        capability, or has had the keyboard capability in the past.
        It is a protocol violation to issue this request on a seat that has
        never had the keyboard capability. The missing_capability error will
        be sent in this case.
      </description>
      <arg name="id" type="new_id" interface="dde_keyboard" summary="seat keyboard"/>
    </request>

    <request name="get_dde_touch">
      <description summary="get touch object">
        get a touch through a global seat object
      </description>
      <arg name="id" type="new_id" interface="dde_touch" summary="seat touch"/>
    </request>
  </interface>

  <interface name="dde_pointer" version="1">
    <description summary="relative pointer object">
      A dde_pointer object is an extension to the wl_pointer interface
      used for emitting global pointer events.
    </description>

    <request name="get_motion">
      <description summary="get a global cursor position">
        client request server to send a global cursor position
      </description>
    </request>

    <event name="motion">
      <description summary="pointer motion event">
      server send a global cursor position to client
      </description>
      <arg name="x" type="fixed" summary="global x coordinate"/>
      <arg name="y" type="fixed" summary="global y coordinate"/>
    </event>

    <enum name="button_state">
      <description summary="physical button state">
      Describes the physical state of a button that produced the button
      event.
      </description>
      <entry name="released" value="0" summary="the button is not pressed"/>
      <entry name="pressed" value="1" summary="the button is pressed"/>
    </enum>

    <event name="button">
      <description summary="pointer button event">
      Mouse button click and release notifications.

      The button is a button code as defined in the Linux kernel's
      linux/input-event-codes.h header file, e.g. BTN_LEFT.

      Any 16-bit button code value is reserved for future additions to the
      kernel's event code list. All other button codes above 0xFFFF are
      currently undefined but may be used in future versions of this
      protocol.
      </description>
      <arg name="x" type="fixed" summary="global x coordinate"/>
      <arg name="y" type="fixed" summary="global y coordinate"/>
      <arg name="button" type="uint" summary="button that produced the event"/>
      <arg name="state" type="uint" enum="button_state" summary="physical state of the button"/>
    </event>

    <enum name="axis">
      <description summary="axis types">
      Describes the axis types of scroll events.
      </description>
      <entry name="vertical_scroll" value="0" summary="vertical axis"/>
      <entry name="horizontal_scroll" value="1" summary="horizontal axis"/>
    </enum>

    <event name="axis">
      <description summary="axis event">
      Scroll and other axis notifications.

      For scroll events (vertical and horizontal scroll axes), the
      value parameter is the length of a vector along the specified
      axis in a coordinate space identical to those of motion events,
      representing a relative movement along the specified axis.

      For devices that support movements non-parallel to axes multiple
      axis events will be emitted.

      When applicable, for example for touch pads, the server can
      choose to emit scroll events where the motion vector is
      equivalent to a motion event vector.

      When applicable, a client can transform its content relative to the
      scroll distance.
      </description>
      <arg name="time" type="uint" summary="timestamp with millisecond granularity"/>
      <arg name="axis" type="uint" enum="axis" summary="axis type"/>
      <arg name="value" type="fixed" summary="length of vector in surface-local coordinate space"/>
    </event>

  </interface>

  <interface name="dde_keyboard" version="7">
    <description summary="keyboard input device">
      The wl_keyboard interface represents one or more keyboards
      associated with a seat.
    </description>

    <enum name="keymap_format">
      <description summary="keyboard mapping format">
        This specifies the format of the keymap provided to the
        client with the wl_keyboard.keymap event.
      </description>
      <entry name="no_keymap" value="0"
       summary="no keymap; client must understand how to interpret the raw keycode"/>
      <entry name="xkb_v1" value="1"
       summary="libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode"/>
    </enum>

    <event name="keymap">
      <description summary="keyboard mapping">
        This event provides a file descriptor to the client which can be
        memory-mapped to provide a keyboard mapping description.

        From version 7 onwards, the fd must be mapped with MAP_PRIVATE by
        the recipient, as MAP_SHARED may fail.
      </description>
      <arg name="format" type="uint" enum="keymap_format" summary="keymap format"/>
      <arg name="fd" type="fd" summary="keymap file descriptor"/>
      <arg name="size" type="uint" summary="keymap size, in bytes"/>
    </event>

    <event name="enter">
      <description summary="enter event">
        Notification that this seat's keyboard focus is on a certain
        surface.

        The compositor must send the wl_keyboard.modifiers event after this
        event.
      </description>
      <arg name="serial" type="uint" summary="serial number of the enter event"/>
      <arg name="surface" type="object" interface="wl_surface" summary="surface gaining keyboard focus"/>
      <arg name="keys" type="array" summary="the currently pressed keys"/>
    </event>

    <event name="leave">
      <description summary="leave event">
        Notification that this seat's keyboard focus is no longer on
        a certain surface.

        The leave notification is sent before the enter notification
        for the new focus.

        After this event client must assume that all keys, including modifiers,
        are lifted and also it must stop key repeating if there's some going on.
      </description>
      <arg name="serial" type="uint" summary="serial number of the leave event"/>
      <arg name="surface" type="object" interface="wl_surface" summary="surface that lost keyboard focus"/>
    </event>

    <enum name="key_state">
      <description summary="physical key state">
        Describes the physical state of a key that produced the key event.
      </description>
      <entry name="released" value="0" summary="key is not pressed"/>
      <entry name="pressed" value="1" summary="key is pressed"/>
    </enum>

    <event name="key">
      <description summary="key event">
        A key was pressed or released.
        The time argument is a timestamp with millisecond
        granularity, with an undefined base.

        The key is a platform-specific key code that can be interpreted
        by feeding it to the keyboard mapping (see the keymap event).

        If this event produces a change in modifiers, then the resulting
        wl_keyboard.modifiers event must be sent after this event.
      </description>
      <arg name="serial" type="uint" summary="serial number of the key event"/>
      <arg name="time" type="uint" summary="timestamp with millisecond granularity"/>
      <arg name="key" type="uint" summary="key that produced the event"/>
      <arg name="state" type="uint" enum="key_state" summary="physical state of the key"/>
    </event>

    <event name="modifiers">
      <description summary="modifier and group state">
        Notifies clients that the modifier and/or group state has
        changed, and it should update its local state.
      </description>
      <arg name="serial" type="uint" summary="serial number of the modifiers event"/>
      <arg name="mods_depressed" type="uint" summary="depressed modifiers"/>
      <arg name="mods_latched" type="uint" summary="latched modifiers"/>
      <arg name="mods_locked" type="uint" summary="locked modifiers"/>
      <arg name="group" type="uint" summary="keyboard layout"/>
    </event>

    <!-- Version 3 additions -->

    <request name="release" type="destructor" since="3">
      <description summary="release the keyboard object"/>
    </request>

    <!-- Version 4 additions -->

    <event name="repeat_info" since="4">
      <description summary="repeat rate and delay">
        Informs the client about the keyboard's repeat rate and delay.

        This event is sent as soon as the wl_keyboard object has been created,
        and is guaranteed to be received by the client before any key press
        event.

        Negative values for either rate or delay are illegal. A rate of zero
        will disable any repeating (regardless of the value of delay).

        This event can be sent later on as well with a new value if necessary,
        so clients should continue listening for the event past the creation
        of wl_keyboard.
      </description>
      <arg name="rate" type="int"
     summary="the rate of repeating keys in characters per second"/>
      <arg name="delay" type="int"
     summary="delay in milliseconds since key down until repeating starts"/>
    </event>
  </interface>

  <interface name="dde_touch" version="7">
    <description summary="touch input device">
      The wl_touch interface represents one or more touchs
      associated with a seat.
    </description>

    <event name="down">
      <description summary="down event">
        Notification that this seat's touch down.
        The time argument is a timestamp with millisecond
        granularity, with an undefined base.
      </description>
      <arg name="id" type="int" summary="id of the touch down event"/>
      <arg name="time" type="uint" summary="timestamp with millisecond granularity"/>
      <arg name="x" type="fixed" summary="global x coordinate"/>
      <arg name="y" type="fixed" summary="global y coordinate"/>
    </event>

    <event name="up">
      <description summary="up event">
        Notification that this seat's touch up.
        The time argument is a timestamp with millisecond
        granularity, with an undefined base.
      </description>
      <arg name="id" type="int" summary="id of the touch up event"/>
      <arg name="time" type="uint" summary="timestamp with millisecond granularity"/>
    </event>

    <event name="motion">
      <description summary="touch motion event">
        Notification that this seat's touch motion.
        The time argument is a timestamp with millisecond
        granularity, with an undefined base.
      </description>
      <arg name="id" type="int" summary="id of the touch motion event"/>
      <arg name="time" type="uint" summary="timestamp with millisecond granularity"/>
      <arg name="x" type="fixed" summary="global x coordinate"/>
      <arg name="y" type="fixed" summary="global y coordinate"/>
    </event>
    <request name="release" type="destructor" since="3">
      <description summary="release the touch object"/>
    </request>
  </interface>

</protocol>
